public class Bezier extends PApplet {
  
  class Vector2 {
    float x,y;

    public Vector2(float x, float y){ this.x = x; this.y = y; }
    public Vector2 add(float other){ this.x += other; this.y += other; return this; }
    public Vector2 add(Vector2 other){ this.x += other.x; this.y += other.y; return this; }
    public Vector2 mult(float other){ this.x *= other; this.y *= other; return this; }
    public Vector2 mult(Vector2 other){ this.x *= other.x; this.y *= other.y; return this; }

    @Override
    public String toString(){ return "<" + this.x + "," + this.y + ">"; }
  }

  class BezierCurve {
    private ArrayList<Vector2> waypoints;
    public BezierCurve(ArrayList<Vector2> points) {
      waypoints = points;
    }

    private double frac(int x){
      if(x == 0) return 1.0;
      return x * frac(x-1);
    }

    public Vector2 getPoint(Double u){
      int size = waypoints.size();
      int x = 0;
      int y = 0;
      //Vector2 sum = new Vector2(0,0);
      for(int i = 0; i < waypoints.size(); i++){
        Vector2 point = waypoints.get(i);
        double k = frac(size) / frac(i) / frac(size-i) * Math.pow(u,i) * Math.pow(1-u, size-i);
        x += k * point.x; y += k * point.y;
      }
      return new Vector2(x,y);
    }

    public void addPoint(Vector2 point){ waypoints.add(point); }
  }
  
  int dragIndex;
  boolean isDraggingHandleWithOppHandle;
  boolean isDraggingAnchor;
  
  Vector2 drag;
  Vector2 anchor;
  
  boolean drawConnections = true;
  boolean drawHandles = true;
  boolean drawAnchors = true;
  
  final int hoverDistance = 10;
  final int splineSize = 30;
  final int pointsPerSpline = 1000;
  ArrayList<Vector2> points = new ArrayList();
  // ArrayList<BezierCurve> splines = new ArrayList();
  BezierCurve spline = new BezierCurve(points);

  void setup()
  {
    surface.setSize(1000, 700);
  }
  
  void draw()
  {
    background(100);
    for(int i = 0; i < points.size(); i++){
      Vector2 point = points.get(i);
      stroke(60);
      if(i<points.size()-1 && drawConnections){
        line(point.x, point.y, points.get(i+1).x, points.get(i+1).y);
      }
      stroke(225);
      circle((float) point.x, (float) point.y, 6.0);
    }
    // noFill();
    drawSplines();
    // fill(255);
    println(points);
    double z = 0.0;
    println(spline.getPoint(z));
  }
  
  void drawSplines(){
    if(points.size() == 0) return;
    Vector2 lastPoint = points.get(0);
    Vector2 point;
    for(double i=0; i<=1; i+= 1.0/pointsPerSpline){
      point = spline.getPoint(i);
      //println(i);
      line((float) point.x, (float) point.y, (float) lastPoint.x, (float) lastPoint.y);
      lastPoint = point;
    }
  }
  
  void addPoint(int x, int y){
    points.add(new Vector2(x,y));
  }
  
  void movePoint(){
    for(int i = 0;i < points.size();i++){
      Vector2 point = points.get(i);
      if(Math.sqrt(Math.pow(point.x - mouseX, 2) + Math.pow(point.y - mouseY, 2)) < hoverDistance){
        drag = point;
        break;
      }
    }
  }
  
  
  void mousePressed(){
    if(mouseButton == RIGHT){
      addPoint(mouseX, mouseY);
    }
     else if(mouseButton == LEFT){
       movePoint();
     }
  }
  
  void mouseDragged(){
    if(drag == null) return;
    drag.x = mouseX;
    drag.y = mouseY;
  }
  
  void mouseReleased(){
    drag = null;
  }
  
  void keyPressed(){ 
    if(key == ' '){
      if (drawConnections) drawConnections = false;
      else if (drawHandles) drawHandles = false;
      else if (drawAnchors) drawAnchors = false;
      else {
        drawConnections = true;
        drawHandles = true;
        drawAnchors = true;
      }
    }
  }
  
  void mouseMoved(){
    
  }
  
}
